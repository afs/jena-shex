/* ShExJavaccTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. ShExJavaccTokenManager.java */
/**
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package shex.parser.javacc;
import shex.parser.*;
import shex.expressions.*;
import org.apache.jena.graph.*;
import static org.apache.jena.riot.lang.extra.LangParserLib.*;

/** Token Manager. */
@SuppressWarnings("unused")public class ShExJavaccTokenManager implements ShExJavaccConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 9:
         jjmatchedKind = 4;
         return jjMoveNfa_0(0, 0);
      case 10:
         jjmatchedKind = 5;
         return jjMoveNfa_0(0, 0);
      case 12:
         jjmatchedKind = 7;
         return jjMoveNfa_0(0, 0);
      case 13:
         jjmatchedKind = 6;
         return jjMoveNfa_0(0, 0);
      case 32:
         jjmatchedKind = 3;
         return jjMoveNfa_0(0, 0);
      case 33:
         jjmatchedKind = 50;
         return jjMoveNfa_0(0, 0);
      case 36:
         jjmatchedKind = 64;
         return jjMoveNfa_0(0, 0);
      case 37:
         jjmatchedKind = 61;
         return jjMoveNfa_0(0, 0);
      case 38:
         jjmatchedKind = 66;
         return jjMoveNfa_0(0, 0);
      case 40:
         jjmatchedKind = 55;
         return jjMoveNfa_0(0, 0);
      case 41:
         jjmatchedKind = 56;
         return jjMoveNfa_0(0, 0);
      case 42:
         jjmatchedKind = 53;
         return jjMoveNfa_0(0, 0);
      case 43:
         jjmatchedKind = 44;
         return jjMoveNfa_0(0, 0);
      case 44:
         jjmatchedKind = 62;
         return jjMoveNfa_0(0, 0);
      case 45:
         jjmatchedKind = 45;
         return jjMoveNfa_0(0, 0);
      case 46:
         jjmatchedKind = 49;
         return jjMoveNfa_0(0, 0);
      case 47:
         jjmatchedKind = 52;
         return jjMoveStringLiteralDfa1_0(0x202L);
      case 59:
         jjmatchedKind = 63;
         return jjMoveNfa_0(0, 0);
      case 61:
         jjmatchedKind = 54;
         return jjMoveNfa_0(0, 0);
      case 63:
         jjmatchedKind = 51;
         return jjMoveNfa_0(0, 0);
      case 64:
         jjmatchedKind = 47;
         return jjMoveNfa_0(0, 0);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x800000L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x4004000L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x2000000000L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x4000100000L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x41000000000L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x2008000L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x11000000L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x7e0000000L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x8200000L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x400000L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x10000L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0xe0000L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x20800000000L);
      case 91:
         jjmatchedKind = 59;
         return jjMoveNfa_0(0, 0);
      case 93:
         jjmatchedKind = 60;
         return jjMoveNfa_0(0, 0);
      case 94:
         jjmatchedKind = 48;
         return jjMoveStringLiteralDfa1_0(0x4L);
      case 97:
         jjmatchedKind = 13;
         return jjMoveStringLiteralDfa1_0(0x800000L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x4004000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x2000000000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x4000100000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x41000000000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x2008000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x11000000L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x7e0000000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x8200000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x400000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x10000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0xe0000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x20800000000L);
      case 123:
         jjmatchedKind = 57;
         return jjMoveNfa_0(0, 0);
      case 124:
         jjmatchedKind = 46;
         return jjMoveNfa_0(0, 0);
      case 125:
         jjmatchedKind = 58;
         return jjMoveNfa_0(0, 0);
      case 126:
         jjmatchedKind = 65;
         return jjMoveNfa_0(0, 0);
      case 65279:
         jjmatchedKind = 12;
         return jjMoveNfa_0(0, 0);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 0);
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 1;
         }
         break;
      case 47:
         if ((active0 & 0x2L) != 0L)
         {
            jjmatchedKind = 1;
            jjmatchedPos = 1;
         }
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x40640004000L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L);
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0x60000L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x1a1000000L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000L);
      case 77:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L);
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0x4800000L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0x808200000L);
      case 82:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x21002010000L);
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L);
      case 88:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000100000L);
      case 94:
         if ((active0 & 0x4L) != 0L)
         {
            jjmatchedKind = 2;
            jjmatchedPos = 1;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x40640004000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x60000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x1a1000000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x4800000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x808200000L);
      case 114:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x21002010000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000100000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 1);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000e0000L);
      case 68:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 2;
         }
         break;
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L);
      case 73:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 2;
         }
         break;
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L);
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0x1b8000000L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x2004000000L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
      case 84:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x4801100000L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L);
      case 88:
         return jjMoveStringLiteralDfa3_0(active0, 0x640000000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000e0000L);
      case 100:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 2;
         }
         break;
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L);
      case 105:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 2;
         }
         break;
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x1b8000000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x2004000000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
      case 116:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x4801100000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L);
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x640000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 2);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L);
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L);
      case 68:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L);
      case 69:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x501100000L);
      case 70:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L);
      case 71:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x280000000L);
      case 76:
         return jjMoveStringLiteralDfa4_0(active0, 0x68000000L);
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L);
      case 80:
         return jjMoveStringLiteralDfa4_0(active0, 0x60000L);
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000080000L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x42000000000L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L);
      case 101:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x501100000L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x280000000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x68000000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x60000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000080000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x42000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 3);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 3);
   }
   switch(curChar)
   {
      case 65:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 4;
         }
         break;
      case 69:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x2060020000L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x8010000L);
      case 76:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000L);
      case 78:
         return jjMoveStringLiteralDfa5_0(active0, 0x280000000L);
      case 82:
         return jjMoveStringLiteralDfa5_0(active0, 0x1108000L);
      case 84:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x1010000000L);
      case 88:
         return jjMoveStringLiteralDfa5_0(active0, 0x500000000L);
      case 97:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 4;
         }
         break;
      case 101:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x2060020000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x8010000L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x280000000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x1108000L);
      case 116:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x1010000000L);
      case 120:
         return jjMoveStringLiteralDfa5_0(active0, 0x500000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 4);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 4);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000L);
      case 67:
         return jjMoveStringLiteralDfa6_0(active0, 0x780020000L);
      case 68:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L);
      case 72:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 5;
         }
         break;
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L);
      case 78:
         return jjMoveStringLiteralDfa6_0(active0, 0x60100000L);
      case 84:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L);
      case 88:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 5;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x780020000L);
      case 100:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L);
      case 104:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 5;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x60100000L);
      case 116:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L);
      case 120:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 5;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 5);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 5);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000L);
      case 69:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000L);
      case 71:
         return jjMoveStringLiteralDfa7_0(active0, 0x60000000L);
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000L);
      case 76:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x780020000L);
      case 79:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000L);
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0x60000000L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000L);
      case 108:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x780020000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 6);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 6);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000L);
      case 71:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000L);
      case 76:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 7;
         }
         break;
      case 78:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000L);
      case 82:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000L);
      case 84:
         return jjMoveStringLiteralDfa8_0(active0, 0x60000000L);
      case 85:
         return jjMoveStringLiteralDfa8_0(active0, 0x780000000L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000L);
      case 103:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000L);
      case 108:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 7;
         }
         break;
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x60000000L);
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0x780000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 7);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 7);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000L);
      case 68:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000L);
      case 72:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 8;
         }
         else if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 8;
         }
         break;
      case 73:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000L);
      case 83:
         return jjMoveStringLiteralDfa9_0(active0, 0x780020000L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000L);
      case 100:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000L);
      case 104:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 8;
         }
         else if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 8;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000L);
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0x780020000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 8);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 8);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 8);
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa10_0(active0, 0x1780000000L);
      case 76:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 9;
         }
         break;
      case 83:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 9;
         }
         break;
      case 84:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x1780000000L);
      case 108:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 9;
         }
         break;
      case 115:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 9;
         }
         break;
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 9);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 9);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 9);
   }
   switch(curChar)
   {
      case 71:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000000L);
      case 83:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 10;
         }
         break;
      case 86:
         return jjMoveStringLiteralDfa11_0(active0, 0x780000000L);
      case 103:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000000L);
      case 115:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 10;
         }
         break;
      case 118:
         return jjMoveStringLiteralDfa11_0(active0, 0x780000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 10);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 10);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 10);
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 11;
         }
         else if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 11;
         }
         else if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 11;
         }
         else if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 11;
         }
         break;
      case 73:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000000000L);
      case 101:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 11;
         }
         else if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 11;
         }
         else if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 11;
         }
         else if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 11;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 11);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 11);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 11);
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa13_0(active0, 0x1000000000L);
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0x1000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 12);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 12);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 12);
   }
   switch(curChar)
   {
      case 83:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 13;
         }
         break;
      case 115:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 13;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 13);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0xfffe7000fffffff6L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x7e00000000ffffffL
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0x0L, 0xbfff000000000000L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0x3000L, 0xffff000000000000L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec8 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffL
};
static final long[] jjbitVec9 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffffffffL
};
static final long[] jjbitVec10 = {
   0x0L, 0x0L, 0x80000000000000L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec11 = {
   0xffffffffffffffffL, 0xbfffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec12 = {
   0x8000000000003000L, 0xffff000000000001L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int strKind = jjmatchedKind;
   int strPos = jjmatchedPos;
   int seenUpto;
   input_stream.backup(seenUpto = curPos + 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { throw new Error("Internal Error"); }
   curPos = 0;
   int startsAt = 0;
   jjnewStateCnt = 315;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 85)
                        kind = 85;
                     { jjCheckNAddStates(0, 6); }
                  }
                  else if ((0x280000000000L & l) != 0L)
                     { jjCheckNAddStates(7, 11); }
                  else if (curChar == 46)
                     { jjCheckNAddTwoStates(296, 298); }
                  else if (curChar == 34)
                     { jjAddStates(12, 13); }
                  else if (curChar == 39)
                     { jjAddStates(14, 15); }
                  else if (curChar == 58)
                  {
                     if (kind > 69)
                        kind = 69;
                     { jjCheckNAddStates(16, 18); }
                  }
                  else if (curChar == 47)
                     { jjCheckNAddTwoStates(21, 24); }
                  else if (curChar == 60)
                     { jjCheckNAddStates(19, 21); }
                  else if (curChar == 35)
                  {
                     if (kind > 8)
                        kind = 8;
                     { jjCheckNAdd(1); }
                  }
                  if (curChar == 34)
                     { jjCheckNAddStates(22, 27); }
                  else if (curChar == 39)
                     { jjCheckNAddStates(28, 33); }
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  { jjCheckNAdd(1); }
                  break;
               case 2:
                  if (curChar == 60)
                     { jjCheckNAddStates(19, 21); }
                  break;
               case 3:
                  if ((0xaffffffa00000000L & l) != 0L)
                     { jjCheckNAddStates(19, 21); }
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 8:
               case 17:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(9); }
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(19, 21); }
                  break;
               case 10:
                  if (curChar == 62 && kind > 68)
                     kind = 68;
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if ((0x8400000000L & l) != 0L && kind > 75)
                     kind = 75;
                  break;
               case 20:
                  if (curChar == 47)
                     { jjCheckNAddTwoStates(21, 24); }
                  break;
               case 21:
                  if ((0xffff7fffffffdbffL & l) != 0L)
                     { jjCheckNAddStates(34, 36); }
                  break;
               case 22:
                  if (curChar != 47)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if ((0x8000ef1000000000L & l) != 0L)
                     { jjCheckNAddStates(34, 36); }
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 29:
               case 37:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(30); }
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(34, 36); }
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 38:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  { jjCheckNAddTwoStates(40, 41); }
                  break;
               case 40:
                  if ((0x3ff600000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(40, 41); }
                  break;
               case 41:
                  if ((0x3ff200000000000L & l) != 0L && kind > 90)
                     kind = 90;
                  break;
               case 44:
                  if ((0xffffffdfffffffffL & l) != 0L)
                     { jjCheckNAddStates(37, 39); }
                  break;
               case 45:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (curChar == 37)
                     { jjCheckNAddStates(37, 39); }
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 52:
               case 60:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(53); }
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(37, 39); }
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 61:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(62); }
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(40, 42); }
                  break;
               case 63:
                  if (curChar == 44)
                     { jjCheckNAddStates(43, 46); }
                  break;
               case 64:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(65); }
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(65, 66); }
                  break;
               case 67:
                  if (curChar == 42)
                     { jjCheckNAdd(66); }
                  break;
               case 69:
                  if ((0x3ff600000000000L & l) != 0L)
                     { jjAddStates(47, 48); }
                  break;
               case 70:
                  if ((0x3ff200000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 71:
                  if (curChar == 58 && kind > 69)
                     kind = 69;
                  break;
               case 72:
                  if ((0x3ff600000000000L & l) != 0L)
                     { jjAddStates(49, 50); }
                  break;
               case 73:
                  if ((0x3ff200000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 74:
                  if (curChar == 58)
                     { jjCheckNAddStates(16, 18); }
                  break;
               case 75:
                  if ((0x7ff000000000000L & l) == 0L)
                     break;
                  if (kind > 70)
                     kind = 70;
                  { jjCheckNAddStates(51, 54); }
                  break;
               case 76:
                  if ((0x7ff600000000000L & l) != 0L)
                     { jjCheckNAddStates(51, 54); }
                  break;
               case 77:
                  if ((0x7ff200000000000L & l) != 0L && kind > 70)
                     kind = 70;
                  break;
               case 79:
                  if ((0xa800fffa00000000L & l) != 0L)
                     { jjCheckNAddStates(51, 54); }
                  break;
               case 80:
                  if (curChar == 37)
                     { jjAddStates(55, 56); }
                  break;
               case 81:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 82:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(51, 54); }
                  break;
               case 83:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 84:
                  if ((0x3ff000000000000L & l) != 0L && kind > 70)
                     kind = 70;
                  break;
               case 85:
                  if ((0xa800fffa00000000L & l) != 0L && kind > 70)
                     kind = 70;
                  break;
               case 87:
                  if ((0xa800fffa00000000L & l) == 0L)
                     break;
                  if (kind > 70)
                     kind = 70;
                  { jjCheckNAddStates(51, 54); }
                  break;
               case 88:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 89:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 90:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 70)
                     kind = 70;
                  { jjCheckNAddStates(51, 54); }
                  break;
               case 91:
                  if (curChar != 58)
                     break;
                  if (kind > 69)
                     kind = 69;
                  { jjCheckNAddStates(16, 18); }
                  break;
               case 94:
                  if ((0x3ff600000000000L & l) != 0L)
                     { jjAddStates(57, 58); }
                  break;
               case 95:
                  if ((0x3ff200000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 96:
                  if (curChar == 58)
                     { jjAddStates(59, 61); }
                  break;
               case 97:
                  if ((0x7ff000000000000L & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  { jjCheckNAddStates(62, 65); }
                  break;
               case 98:
                  if ((0x7ff600000000000L & l) != 0L)
                     { jjCheckNAddStates(62, 65); }
                  break;
               case 99:
                  if ((0x7ff200000000000L & l) != 0L && kind > 71)
                     kind = 71;
                  break;
               case 101:
                  if ((0xa800fffa00000000L & l) != 0L)
                     { jjCheckNAddStates(62, 65); }
                  break;
               case 102:
                  if (curChar == 37)
                     { jjAddStates(66, 67); }
                  break;
               case 103:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 104:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(62, 65); }
                  break;
               case 105:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 106:
                  if ((0x3ff000000000000L & l) != 0L && kind > 71)
                     kind = 71;
                  break;
               case 107:
                  if ((0xa800fffa00000000L & l) != 0L && kind > 71)
                     kind = 71;
                  break;
               case 109:
                  if ((0xa800fffa00000000L & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  { jjCheckNAddStates(62, 65); }
                  break;
               case 110:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 111:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 112:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  { jjCheckNAddStates(62, 65); }
                  break;
               case 114:
                  if ((0x3ff600000000000L & l) != 0L)
                     { jjAddStates(68, 69); }
                  break;
               case 115:
                  if ((0x3ff200000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 116:
                  if (curChar == 58 && kind > 72)
                     kind = 72;
                  break;
               case 118:
                  if (curChar == 45)
                     { jjCheckNAdd(119); }
                  break;
               case 119:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  { jjCheckNAddTwoStates(118, 119); }
                  break;
               case 120:
                  if (curChar == 39)
                     { jjCheckNAddStates(28, 33); }
                  break;
               case 121:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     { jjCheckNAddStates(70, 72); }
                  break;
               case 122:
                  if (curChar == 39 && kind > 76)
                     kind = 76;
                  break;
               case 124:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(70, 72); }
                  break;
               case 126:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 127:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 128;
                  break;
               case 128:
               case 136:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(129); }
                  break;
               case 129:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(70, 72); }
                  break;
               case 130:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 131:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 132;
                  break;
               case 132:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 133;
                  break;
               case 133:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 134:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 135:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 137:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     { jjCheckNAddStates(73, 75); }
                  break;
               case 138:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 139;
                  break;
               case 141:
                  if (curChar == 45)
                     { jjCheckNAdd(142); }
                  break;
               case 142:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  { jjCheckNAddTwoStates(141, 142); }
                  break;
               case 144:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(73, 75); }
                  break;
               case 146:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 147;
                  break;
               case 147:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 148;
                  break;
               case 148:
               case 156:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(149); }
                  break;
               case 149:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(73, 75); }
                  break;
               case 150:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 151;
                  break;
               case 151:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 152;
                  break;
               case 152:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 153;
                  break;
               case 153:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 154;
                  break;
               case 154:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 155;
                  break;
               case 155:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 156;
                  break;
               case 157:
                  if (curChar == 34)
                     { jjCheckNAddStates(22, 27); }
                  break;
               case 158:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddStates(76, 78); }
                  break;
               case 159:
                  if (curChar == 34 && kind > 77)
                     kind = 77;
                  break;
               case 161:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(76, 78); }
                  break;
               case 163:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 164;
                  break;
               case 164:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 165;
                  break;
               case 165:
               case 173:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(166); }
                  break;
               case 166:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(76, 78); }
                  break;
               case 167:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 168;
                  break;
               case 168:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 169;
                  break;
               case 169:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 170;
                  break;
               case 170:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 171;
                  break;
               case 171:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 172;
                  break;
               case 172:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 173;
                  break;
               case 174:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddStates(79, 81); }
                  break;
               case 175:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 176;
                  break;
               case 178:
                  if (curChar == 45)
                     { jjCheckNAdd(179); }
                  break;
               case 179:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  { jjCheckNAddTwoStates(178, 179); }
                  break;
               case 181:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(79, 81); }
                  break;
               case 183:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 184;
                  break;
               case 184:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 185;
                  break;
               case 185:
               case 193:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(186); }
                  break;
               case 186:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(79, 81); }
                  break;
               case 187:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 188;
                  break;
               case 188:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 189;
                  break;
               case 189:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 190;
                  break;
               case 190:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 191;
                  break;
               case 191:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 192;
                  break;
               case 192:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 193;
                  break;
               case 194:
                  if (curChar == 39)
                     { jjAddStates(14, 15); }
                  break;
               case 195:
                  if (curChar == 39)
                     { jjCheckNAddStates(82, 85); }
                  break;
               case 196:
               case 199:
                  if (curChar == 39)
                     { jjCheckNAddTwoStates(197, 200); }
                  break;
               case 197:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     { jjCheckNAddStates(82, 85); }
                  break;
               case 198:
                  if (curChar == 39)
                     { jjAddStates(86, 87); }
                  break;
               case 201:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(82, 85); }
                  break;
               case 203:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 204;
                  break;
               case 204:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 205;
                  break;
               case 205:
               case 213:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(206); }
                  break;
               case 206:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(82, 85); }
                  break;
               case 207:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 208;
                  break;
               case 208:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 209;
                  break;
               case 209:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 210;
                  break;
               case 210:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 211;
                  break;
               case 211:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 212;
                  break;
               case 212:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 213;
                  break;
               case 214:
                  if (curChar == 39 && kind > 78)
                     kind = 78;
                  break;
               case 215:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 214;
                  break;
               case 216:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 195;
                  break;
               case 217:
                  if (curChar == 39)
                     { jjCheckNAddStates(88, 91); }
                  break;
               case 218:
               case 221:
                  if (curChar == 39)
                     { jjCheckNAddTwoStates(219, 222); }
                  break;
               case 219:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     { jjCheckNAddStates(88, 91); }
                  break;
               case 220:
                  if (curChar == 39)
                     { jjAddStates(92, 93); }
                  break;
               case 223:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(88, 91); }
                  break;
               case 225:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 226;
                  break;
               case 226:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 227;
                  break;
               case 227:
               case 235:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(228); }
                  break;
               case 228:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(88, 91); }
                  break;
               case 229:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 230;
                  break;
               case 230:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 231;
                  break;
               case 231:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 232;
                  break;
               case 232:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 233;
                  break;
               case 233:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 234;
                  break;
               case 234:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 235;
                  break;
               case 236:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 237;
                  break;
               case 239:
                  if (curChar == 45)
                     { jjCheckNAdd(240); }
                  break;
               case 240:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  { jjCheckNAddTwoStates(239, 240); }
                  break;
               case 241:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 236;
                  break;
               case 242:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 217;
                  break;
               case 243:
                  if (curChar == 34)
                     { jjAddStates(12, 13); }
                  break;
               case 244:
                  if (curChar == 34)
                     { jjCheckNAddStates(94, 97); }
                  break;
               case 245:
               case 248:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(246, 249); }
                  break;
               case 246:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddStates(94, 97); }
                  break;
               case 247:
                  if (curChar == 34)
                     { jjAddStates(98, 99); }
                  break;
               case 250:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(94, 97); }
                  break;
               case 252:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 253;
                  break;
               case 253:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 254;
                  break;
               case 254:
               case 262:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(255); }
                  break;
               case 255:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(94, 97); }
                  break;
               case 256:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 257;
                  break;
               case 257:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 258;
                  break;
               case 258:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 259;
                  break;
               case 259:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 260;
                  break;
               case 260:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 261;
                  break;
               case 261:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 262;
                  break;
               case 263:
                  if (curChar == 34 && kind > 79)
                     kind = 79;
                  break;
               case 264:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 263;
                  break;
               case 265:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 244;
                  break;
               case 266:
                  if (curChar == 34)
                     { jjCheckNAddStates(100, 103); }
                  break;
               case 267:
               case 270:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(268, 271); }
                  break;
               case 268:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddStates(100, 103); }
                  break;
               case 269:
                  if (curChar == 34)
                     { jjAddStates(104, 105); }
                  break;
               case 272:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(100, 103); }
                  break;
               case 274:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 275;
                  break;
               case 275:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 276;
                  break;
               case 276:
               case 284:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(277); }
                  break;
               case 277:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(100, 103); }
                  break;
               case 278:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 279;
                  break;
               case 279:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 280;
                  break;
               case 280:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 281;
                  break;
               case 281:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 282;
                  break;
               case 282:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 283;
                  break;
               case 283:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 284;
                  break;
               case 285:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 286;
                  break;
               case 288:
                  if (curChar == 45)
                     { jjCheckNAdd(289); }
                  break;
               case 289:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  { jjCheckNAddTwoStates(288, 289); }
                  break;
               case 290:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 285;
                  break;
               case 291:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 266;
                  break;
               case 292:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAddStates(7, 11); }
                  break;
               case 293:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  { jjCheckNAdd(293); }
                  break;
               case 294:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(294, 295); }
                  break;
               case 295:
                  if (curChar == 46)
                     { jjCheckNAdd(296); }
                  break;
               case 296:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  { jjCheckNAdd(296); }
                  break;
               case 297:
                  if (curChar == 46)
                     { jjCheckNAdd(298); }
                  break;
               case 298:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(298, 299); }
                  break;
               case 300:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(301); }
                  break;
               case 301:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 87)
                     kind = 87;
                  { jjCheckNAdd(301); }
                  break;
               case 302:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(106, 109); }
                  break;
               case 303:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(303, 304); }
                  break;
               case 304:
                  if (curChar == 46)
                     { jjCheckNAddTwoStates(305, 306); }
                  break;
               case 305:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(305, 306); }
                  break;
               case 307:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(308); }
                  break;
               case 308:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 87)
                     kind = 87;
                  { jjCheckNAdd(308); }
                  break;
               case 309:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(309, 310); }
                  break;
               case 311:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(312); }
                  break;
               case 312:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 87)
                     kind = 87;
                  { jjCheckNAdd(312); }
                  break;
               case 313:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  { jjCheckNAddStates(0, 6); }
                  break;
               case 314:
                  if (curChar == 46)
                     { jjCheckNAddTwoStates(296, 298); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(110, 115); }
                  else if (curChar == 64)
                     { jjCheckNAddStates(116, 120); }
                  else if (curChar == 123)
                     { jjCheckNAddStates(121, 125); }
                  else if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 38;
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 1:
                  if (kind > 8)
                     kind = 8;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if ((0xc7fffffeafffffffL & l) != 0L)
                     { jjCheckNAddStates(19, 21); }
                  break;
               case 4:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 5:
                  if ((0x20000000200000L & l) != 0L)
                     { jjAddStates(126, 127); }
                  break;
               case 6:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 7:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 8:
               case 17:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(9); }
                  break;
               case 9:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(19, 21); }
                  break;
               case 11:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 12:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 13:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 14:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 15:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 16:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 18:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 19:
                  if ((0x14404410144044L & l) != 0L && kind > 75)
                     kind = 75;
                  break;
               case 21:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(34, 36); }
                  break;
               case 23:
                  if ((0x108220001082200L & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 24:
                  if (curChar == 92)
                     { jjAddStates(128, 129); }
                  break;
               case 25:
                  if ((0x3814400078144000L & l) != 0L)
                     { jjCheckNAddStates(34, 36); }
                  break;
               case 26:
                  if ((0x20000000200000L & l) != 0L)
                     { jjAddStates(130, 131); }
                  break;
               case 27:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 28:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 29:
               case 37:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(30); }
                  break;
               case 30:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(34, 36); }
                  break;
               case 31:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 32:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 33:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 34:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 35:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 36:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  { jjCheckNAddTwoStates(40, 41); }
                  break;
               case 40:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(40, 41); }
                  break;
               case 41:
                  if ((0x7fffffe87fffffeL & l) != 0L && kind > 90)
                     kind = 90;
                  break;
               case 42:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 43:
                  if (curChar == 123)
                     { jjCheckNAddStates(121, 125); }
                  break;
               case 44:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(37, 39); }
                  break;
               case 46:
                  if (curChar == 125 && kind > 39)
                     kind = 39;
                  break;
               case 47:
                  if (curChar == 92)
                     { jjAddStates(132, 133); }
                  break;
               case 48:
                  if (curChar == 92)
                     { jjCheckNAddStates(37, 39); }
                  break;
               case 49:
                  if ((0x20000000200000L & l) != 0L)
                     { jjAddStates(134, 135); }
                  break;
               case 50:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 51:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 52:
               case 60:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(53); }
                  break;
               case 53:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(37, 39); }
                  break;
               case 54:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 55:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 56:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 57:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 58:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 59:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 66:
                  if (curChar == 125 && kind > 40)
                     kind = 40;
                  break;
               case 68:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(110, 115); }
                  break;
               case 69:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(69, 70); }
                  break;
               case 70:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(71); }
                  break;
               case 72:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(72, 73); }
                  break;
               case 73:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(74); }
                  break;
               case 75:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 70)
                     kind = 70;
                  { jjCheckNAddStates(51, 54); }
                  break;
               case 76:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(51, 54); }
                  break;
               case 77:
                  if ((0x7fffffe87fffffeL & l) != 0L && kind > 70)
                     kind = 70;
                  break;
               case 78:
                  if (curChar == 92)
                     { jjAddStates(136, 137); }
                  break;
               case 79:
                  if ((0x4000000080000001L & l) != 0L)
                     { jjCheckNAddStates(51, 54); }
                  break;
               case 81:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 82:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(51, 54); }
                  break;
               case 83:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 84:
                  if ((0x7e0000007eL & l) != 0L && kind > 70)
                     kind = 70;
                  break;
               case 85:
                  if ((0x4000000080000001L & l) != 0L && kind > 70)
                     kind = 70;
                  break;
               case 86:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 87:
                  if ((0x4000000080000001L & l) == 0L)
                     break;
                  if (kind > 70)
                     kind = 70;
                  { jjCheckNAddStates(51, 54); }
                  break;
               case 89:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 90:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 70)
                     kind = 70;
                  { jjCheckNAddStates(51, 54); }
                  break;
               case 92:
                  if (curChar == 64)
                     { jjCheckNAddStates(116, 120); }
                  break;
               case 93:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(138, 140); }
                  break;
               case 94:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(94, 95); }
                  break;
               case 95:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(96); }
                  break;
               case 97:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  { jjCheckNAddStates(62, 65); }
                  break;
               case 98:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(62, 65); }
                  break;
               case 99:
                  if ((0x7fffffe87fffffeL & l) != 0L && kind > 71)
                     kind = 71;
                  break;
               case 100:
                  if (curChar == 92)
                     { jjAddStates(141, 142); }
                  break;
               case 101:
                  if ((0x4000000080000001L & l) != 0L)
                     { jjCheckNAddStates(62, 65); }
                  break;
               case 103:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 104:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(62, 65); }
                  break;
               case 105:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 106:
                  if ((0x7e0000007eL & l) != 0L && kind > 71)
                     kind = 71;
                  break;
               case 107:
                  if ((0x4000000080000001L & l) != 0L && kind > 71)
                     kind = 71;
                  break;
               case 108:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 109:
                  if ((0x4000000080000001L & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  { jjCheckNAddStates(62, 65); }
                  break;
               case 111:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 112:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  { jjCheckNAddStates(62, 65); }
                  break;
               case 113:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(143, 145); }
                  break;
               case 114:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(114, 115); }
                  break;
               case 115:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(116); }
                  break;
               case 117:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  { jjCheckNAddTwoStates(117, 118); }
                  break;
               case 119:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  { jjCheckNAddTwoStates(118, 119); }
                  break;
               case 121:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(70, 72); }
                  break;
               case 123:
                  if (curChar == 92)
                     { jjAddStates(146, 147); }
                  break;
               case 124:
                  if ((0x14404410144044L & l) != 0L)
                     { jjCheckNAddStates(70, 72); }
                  break;
               case 125:
                  if ((0x20000000200000L & l) != 0L)
                     { jjAddStates(148, 149); }
                  break;
               case 126:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 127:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 128;
                  break;
               case 128:
               case 136:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(129); }
                  break;
               case 129:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(70, 72); }
                  break;
               case 130:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 131:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 132;
                  break;
               case 132:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 133;
                  break;
               case 133:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 134:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 135:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 137:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(73, 75); }
                  break;
               case 139:
                  if (curChar == 64)
                     { jjCheckNAdd(140); }
                  break;
               case 140:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  { jjCheckNAddTwoStates(140, 141); }
                  break;
               case 142:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  { jjCheckNAddTwoStates(141, 142); }
                  break;
               case 143:
                  if (curChar == 92)
                     { jjAddStates(150, 151); }
                  break;
               case 144:
                  if ((0x14404410144044L & l) != 0L)
                     { jjCheckNAddStates(73, 75); }
                  break;
               case 145:
                  if ((0x20000000200000L & l) != 0L)
                     { jjAddStates(152, 153); }
                  break;
               case 146:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 147;
                  break;
               case 147:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 148;
                  break;
               case 148:
               case 156:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(149); }
                  break;
               case 149:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(73, 75); }
                  break;
               case 150:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 151;
                  break;
               case 151:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 152;
                  break;
               case 152:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 153;
                  break;
               case 153:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 154;
                  break;
               case 154:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 155;
                  break;
               case 155:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 156;
                  break;
               case 158:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(76, 78); }
                  break;
               case 160:
                  if (curChar == 92)
                     { jjAddStates(154, 155); }
                  break;
               case 161:
                  if ((0x14404410144044L & l) != 0L)
                     { jjCheckNAddStates(76, 78); }
                  break;
               case 162:
                  if ((0x20000000200000L & l) != 0L)
                     { jjAddStates(156, 157); }
                  break;
               case 163:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 164;
                  break;
               case 164:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 165;
                  break;
               case 165:
               case 173:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(166); }
                  break;
               case 166:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(76, 78); }
                  break;
               case 167:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 168;
                  break;
               case 168:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 169;
                  break;
               case 169:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 170;
                  break;
               case 170:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 171;
                  break;
               case 171:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 172;
                  break;
               case 172:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 173;
                  break;
               case 174:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(79, 81); }
                  break;
               case 176:
                  if (curChar == 64)
                     { jjCheckNAdd(177); }
                  break;
               case 177:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  { jjCheckNAddTwoStates(177, 178); }
                  break;
               case 179:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  { jjCheckNAddTwoStates(178, 179); }
                  break;
               case 180:
                  if (curChar == 92)
                     { jjAddStates(158, 159); }
                  break;
               case 181:
                  if ((0x14404410144044L & l) != 0L)
                     { jjCheckNAddStates(79, 81); }
                  break;
               case 182:
                  if ((0x20000000200000L & l) != 0L)
                     { jjAddStates(160, 161); }
                  break;
               case 183:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 184;
                  break;
               case 184:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 185;
                  break;
               case 185:
               case 193:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(186); }
                  break;
               case 186:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(79, 81); }
                  break;
               case 187:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 188;
                  break;
               case 188:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 189;
                  break;
               case 189:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 190;
                  break;
               case 190:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 191;
                  break;
               case 191:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 192;
                  break;
               case 192:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 193;
                  break;
               case 197:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(82, 85); }
                  break;
               case 200:
                  if (curChar == 92)
                     { jjAddStates(162, 163); }
                  break;
               case 201:
                  if ((0x14404410144044L & l) != 0L)
                     { jjCheckNAddStates(82, 85); }
                  break;
               case 202:
                  if ((0x20000000200000L & l) != 0L)
                     { jjAddStates(164, 165); }
                  break;
               case 203:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 204;
                  break;
               case 204:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 205;
                  break;
               case 205:
               case 213:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(206); }
                  break;
               case 206:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(82, 85); }
                  break;
               case 207:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 208;
                  break;
               case 208:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 209;
                  break;
               case 209:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 210;
                  break;
               case 210:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 211;
                  break;
               case 211:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 212;
                  break;
               case 212:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 213;
                  break;
               case 219:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(88, 91); }
                  break;
               case 222:
                  if (curChar == 92)
                     { jjAddStates(166, 167); }
                  break;
               case 223:
                  if ((0x14404410144044L & l) != 0L)
                     { jjCheckNAddStates(88, 91); }
                  break;
               case 224:
                  if ((0x20000000200000L & l) != 0L)
                     { jjAddStates(168, 169); }
                  break;
               case 225:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 226;
                  break;
               case 226:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 227;
                  break;
               case 227:
               case 235:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(228); }
                  break;
               case 228:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(88, 91); }
                  break;
               case 229:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 230;
                  break;
               case 230:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 231;
                  break;
               case 231:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 232;
                  break;
               case 232:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 233;
                  break;
               case 233:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 234;
                  break;
               case 234:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 235;
                  break;
               case 237:
                  if (curChar == 64)
                     { jjCheckNAdd(238); }
                  break;
               case 238:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  { jjCheckNAddTwoStates(238, 239); }
                  break;
               case 240:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  { jjCheckNAddTwoStates(239, 240); }
                  break;
               case 246:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(94, 97); }
                  break;
               case 249:
                  if (curChar == 92)
                     { jjAddStates(170, 171); }
                  break;
               case 250:
                  if ((0x14404410144044L & l) != 0L)
                     { jjCheckNAddStates(94, 97); }
                  break;
               case 251:
                  if ((0x20000000200000L & l) != 0L)
                     { jjAddStates(172, 173); }
                  break;
               case 252:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 253;
                  break;
               case 253:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 254;
                  break;
               case 254:
               case 262:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(255); }
                  break;
               case 255:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(94, 97); }
                  break;
               case 256:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 257;
                  break;
               case 257:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 258;
                  break;
               case 258:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 259;
                  break;
               case 259:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 260;
                  break;
               case 260:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 261;
                  break;
               case 261:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 262;
                  break;
               case 268:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(100, 103); }
                  break;
               case 271:
                  if (curChar == 92)
                     { jjAddStates(174, 175); }
                  break;
               case 272:
                  if ((0x14404410144044L & l) != 0L)
                     { jjCheckNAddStates(100, 103); }
                  break;
               case 273:
                  if ((0x20000000200000L & l) != 0L)
                     { jjAddStates(176, 177); }
                  break;
               case 274:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 275;
                  break;
               case 275:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 276;
                  break;
               case 276:
               case 284:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(277); }
                  break;
               case 277:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(100, 103); }
                  break;
               case 278:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 279;
                  break;
               case 279:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 280;
                  break;
               case 280:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 281;
                  break;
               case 281:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 282;
                  break;
               case 282:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 283;
                  break;
               case 283:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 284;
                  break;
               case 286:
                  if (curChar == 64)
                     { jjCheckNAdd(287); }
                  break;
               case 287:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  { jjCheckNAddTwoStates(287, 288); }
                  break;
               case 289:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  { jjCheckNAddTwoStates(288, 289); }
                  break;
               case 299:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(178, 179); }
                  break;
               case 306:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(180, 181); }
                  break;
               case 310:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(182, 183); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(110, 115); }
                  break;
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(19, 21); }
                  break;
               case 21:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(34, 36); }
                  break;
               case 39:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 90)
                     kind = 90;
                  { jjCheckNAddTwoStates(40, 41); }
                  break;
               case 40:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(40, 41); }
                  break;
               case 41:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 90)
                     kind = 90;
                  break;
               case 44:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(37, 39); }
                  break;
               case 69:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(69, 70); }
                  break;
               case 70:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(71); }
                  break;
               case 72:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(72, 73); }
                  break;
               case 73:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(74); }
                  break;
               case 75:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 70)
                     kind = 70;
                  { jjCheckNAddStates(51, 54); }
                  break;
               case 76:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(51, 54); }
                  break;
               case 77:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 70)
                     kind = 70;
                  break;
               case 93:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(138, 140); }
                  break;
               case 94:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(94, 95); }
                  break;
               case 95:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(96); }
                  break;
               case 97:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 71)
                     kind = 71;
                  { jjCheckNAddStates(62, 65); }
                  break;
               case 98:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(62, 65); }
                  break;
               case 99:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 71)
                     kind = 71;
                  break;
               case 113:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(143, 145); }
                  break;
               case 114:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(114, 115); }
                  break;
               case 115:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(116); }
                  break;
               case 121:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(70, 72); }
                  break;
               case 137:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(73, 75); }
                  break;
               case 158:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(76, 78); }
                  break;
               case 174:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(79, 81); }
                  break;
               case 197:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(82, 85); }
                  break;
               case 219:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(88, 91); }
                  break;
               case 246:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(94, 97); }
                  break;
               case 268:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(100, 103); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 315 - (jjnewStateCnt = startsAt)))
         break;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { break; }
   }
   if (jjmatchedPos > strPos)
      return curPos;

   int toRet = Math.max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) { throw new Error("Internal Error : Please send a bug report."); }

   if (jjmatchedPos < strPos)
   {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
   }
   else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

   return toRet;
}
private int jjMoveStringLiteralDfa0_1(){
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x400L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(1, 10);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   293, 294, 295, 303, 304, 309, 310, 293, 294, 295, 297, 302, 265, 291, 216, 242, 
   75, 86, 88, 3, 4, 10, 158, 159, 174, 175, 180, 160, 121, 122, 137, 138, 
   143, 123, 21, 22, 24, 44, 45, 47, 62, 63, 66, 64, 65, 67, 66, 69, 
   70, 72, 73, 76, 77, 78, 80, 81, 83, 94, 95, 97, 108, 110, 98, 99, 
   100, 102, 103, 105, 114, 115, 121, 122, 123, 137, 138, 143, 158, 159, 160, 174, 
   175, 180, 196, 197, 198, 200, 199, 215, 218, 219, 220, 222, 221, 241, 245, 246, 
   247, 249, 248, 264, 267, 268, 269, 271, 270, 290, 303, 304, 309, 310, 69, 70, 
   71, 72, 73, 74, 93, 96, 113, 116, 117, 44, 45, 61, 62, 47, 6, 11, 
   25, 26, 27, 31, 48, 49, 50, 54, 79, 85, 94, 95, 96, 101, 107, 114, 
   115, 116, 124, 125, 126, 130, 144, 145, 146, 150, 161, 162, 163, 167, 181, 182, 
   183, 187, 201, 202, 203, 207, 223, 224, 225, 229, 250, 251, 252, 256, 272, 273, 
   274, 278, 300, 301, 307, 308, 311, 312, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 47:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec9[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec10[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 47:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec9[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", "\57\57", "\136\136", null, null, null, null, null, null, null, null, null, 
"\ufeff", "\141", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, "\53", "\55", "\174", "\100", "\136", "\56", "\41", "\77", 
"\57", "\52", "\75", "\50", "\51", "\173", "\175", "\133", "\135", "\45", "\54", 
"\73", "\44", "\176", "\46", null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       if (jjmatchedPos == 0 && jjmatchedKind > 11)
       {
          jjmatchedKind = 11;
       }
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public ShExJavaccTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public ShExJavaccTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 315; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "ML_COMMENT_STATE",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffff7fffffff007L, 0xeeff9f7L, 
};
static final long[] jjtoSkip = {
   0xff8L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[315];
    private final int[] jjstateSet = new int[2 * 315];

    
    protected char curChar;
}
