/* ShExJavacc.java */
/* Generated By:JavaCC: Do not edit this line. ShExJavacc.java */
/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package shex.parser.javacc;

import shex.parser.*;
//import org.apache.jena.sparql.path.*;

public class ShExJavacc extends ShExBase implements ShExJavaccConstants {

  final public void Unit() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BOM:{
      jj_consume_token(BOM);
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    shexDoc();
    jj_consume_token(0);
  }

  final public void shexDoc() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BASE:
      case IMPORTS:
      case PREFIX:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      directive();
    }
  }

  final public void directive() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BASE:{
      baseDecl();
      break;
      }
    case PREFIX:{
      prefixDecl();
      break;
      }
    case IMPORTS:{
      importDecl();
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void baseDecl() throws ParseException {String iri ;
    jj_consume_token(BASE);
    iri = IRIREF();
  }

  final public void prefixDecl() throws ParseException {Token t ; String iri ;
    jj_consume_token(PREFIX);
    t = jj_consume_token(PNAME_NS);
    iri = IRIREF();
  }

  final public void importDecl() throws ParseException {String iri ;
    jj_consume_token(IMPORTS);
    iri = iri();
  }

  final public void notStartAction() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case START:{
      start();
      break;
      }
    case IRIref:
    case PNAME_NS:
    case PNAME_LN:
    case BLANK_NODE_LABEL:{
      shapeExprDecl();
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void start() throws ParseException {
    jj_consume_token(START);
    jj_consume_token(EQUALS);
    inlineShapeExpression();
  }

  final public void startActions() throws ParseException {
    label_2:
    while (true) {
      codeDecl();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PERCENT_CHAR:{
        ;
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
    }
  }

  final public void statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BASE:
    case IMPORTS:
    case PREFIX:{
      directive();
      break;
      }
    case START:
    case IRIref:
    case PNAME_NS:
    case PNAME_LN:
    case BLANK_NODE_LABEL:{
      notStartAction();
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void shapeExprDecl() throws ParseException {
    shapeExprLabel();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOT:
    case LITERAL:
    case IRI:
    case BNODE:
    case NONLITERAL:
    case LENGTH:
    case MINLENGTH:
    case MAXLENGTH:
    case MININCLUSIVE:
    case MINEXCLUSIVE:
    case MAXINCLUSIVE:
    case MAXEXCLUSIVE:
    case TOTALDIGITS:
    case FRACTIONDIGITS:
    case CLOSED:
    case EXTRA:
    case AT:
    case DOT:
    case LPAREN:
    case LBRACE:
    case LBRACKET:
    case IRIref:
    case PNAME_NS:
    case PNAME_LN:
    case ATPNAME_NS:
    case ATPNAME_LN:
    case REGEXP:{
      shapeExpression();
      break;
      }
    case EXTERNAL:{
      jj_consume_token(EXTERNAL);
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void shapeExpression() throws ParseException {
    shapeOr();
  }

  final public void inlineShapeExpression() throws ParseException {
    inlineShapeOr();
  }

  final public void shapeOr() throws ParseException {
    shapeAnd();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OR:{
        ;
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
      jj_consume_token(OR);
      shapeAnd();
    }
  }

  final public void inlineShapeOr() throws ParseException {
    inlineShapeAnd();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OR:{
        ;
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        break label_4;
      }
      jj_consume_token(OR);
      inlineShapeAnd();
    }
  }

  final public void shapeAnd() throws ParseException {
    shapeNot();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        ;
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        break label_5;
      }
      jj_consume_token(AND);
      shapeNot();
    }
  }

  final public void inlineShapeAnd() throws ParseException {
    inlineShapeNot();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        ;
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        break label_6;
      }
      jj_consume_token(AND);
      inlineShapeNot();
    }
  }

  final public void shapeNot() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOT:{
      jj_consume_token(NOT);
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    shapeAtom();
  }

  final public void inlineShapeNot() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOT:{
      jj_consume_token(NOT);
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    inlineShapeAtom();
  }

  final public void shapeAtom() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IRI:
    case BNODE:
    case NONLITERAL:
    case LENGTH:
    case MINLENGTH:
    case MAXLENGTH:
    case REGEXP:{
      nonLitNodeConstraint();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CLOSED:
      case EXTRA:
      case AT:
      case LBRACE:
      case ATPNAME_NS:
      case ATPNAME_LN:{
        shapeOrRef();
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      break;
      }
    case LITERAL:
    case MININCLUSIVE:
    case MINEXCLUSIVE:
    case MAXINCLUSIVE:
    case MAXEXCLUSIVE:
    case TOTALDIGITS:
    case FRACTIONDIGITS:
    case LBRACKET:
    case IRIref:
    case PNAME_NS:
    case PNAME_LN:{
      litNodeConstraint();
      break;
      }
    case CLOSED:
    case EXTRA:
    case AT:
    case LBRACE:
    case ATPNAME_NS:
    case ATPNAME_LN:{
      shapeOrRef();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IRI:
      case BNODE:
      case NONLITERAL:
      case LENGTH:
      case MINLENGTH:
      case MAXLENGTH:
      case REGEXP:{
        nonLitNodeConstraint();
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      break;
      }
    case LPAREN:{
      jj_consume_token(LPAREN);
      shapeExpression();
      jj_consume_token(RPAREN);
      break;
      }
    case DOT:{
      jj_consume_token(DOT);
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void shapeAtomNoRef() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IRI:
    case BNODE:
    case NONLITERAL:
    case LENGTH:
    case MINLENGTH:
    case MAXLENGTH:
    case REGEXP:{
      nonLitNodeConstraint();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CLOSED:
      case EXTRA:
      case AT:
      case LBRACE:
      case ATPNAME_NS:
      case ATPNAME_LN:{
        shapeOrRef();
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      break;
      }
    case LITERAL:
    case MININCLUSIVE:
    case MINEXCLUSIVE:
    case MAXINCLUSIVE:
    case MAXEXCLUSIVE:
    case TOTALDIGITS:
    case FRACTIONDIGITS:
    case LBRACKET:
    case IRIref:
    case PNAME_NS:
    case PNAME_LN:{
      litNodeConstraint();
      break;
      }
    case CLOSED:
    case EXTRA:
    case LBRACE:{
      shapeDefinition();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IRI:
      case BNODE:
      case NONLITERAL:
      case LENGTH:
      case MINLENGTH:
      case MAXLENGTH:
      case REGEXP:{
        nonLitNodeConstraint();
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      break;
      }
    case LPAREN:{
      jj_consume_token(LPAREN);
      shapeExpression();
      jj_consume_token(RPAREN);
      break;
      }
    case DOT:{
      jj_consume_token(DOT);
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void inlineShapeAtom() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IRI:
    case BNODE:
    case NONLITERAL:
    case LENGTH:
    case MINLENGTH:
    case MAXLENGTH:
    case REGEXP:{
      nonLitNodeConstraint();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CLOSED:
      case EXTRA:
      case AT:
      case LBRACE:
      case ATPNAME_NS:
      case ATPNAME_LN:{
        inlineShapeOrRef();
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        ;
      }
      break;
      }
    case LITERAL:
    case MININCLUSIVE:
    case MINEXCLUSIVE:
    case MAXINCLUSIVE:
    case MAXEXCLUSIVE:
    case TOTALDIGITS:
    case FRACTIONDIGITS:
    case LBRACKET:
    case IRIref:
    case PNAME_NS:
    case PNAME_LN:{
      litNodeConstraint();
      break;
      }
    case CLOSED:
    case EXTRA:
    case AT:
    case LBRACE:
    case ATPNAME_NS:
    case ATPNAME_LN:{
      inlineShapeOrRef();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IRI:
      case BNODE:
      case NONLITERAL:
      case LENGTH:
      case MINLENGTH:
      case MAXLENGTH:
      case REGEXP:{
        nonLitNodeConstraint();
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        ;
      }
      break;
      }
    case LPAREN:{
      jj_consume_token(LPAREN);
      shapeExpression();
      jj_consume_token(RPAREN);
      break;
      }
    case DOT:{
      jj_consume_token(DOT);
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void shapeOrRef() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CLOSED:
    case EXTRA:
    case LBRACE:{
      shapeDefinition();
      break;
      }
    case AT:
    case ATPNAME_NS:
    case ATPNAME_LN:{
      shapeRef();
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void inlineShapeOrRef() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CLOSED:
    case EXTRA:
    case LBRACE:{
      inlineShapeDefinition();
      break;
      }
    case AT:
    case ATPNAME_NS:
    case ATPNAME_LN:{
      shapeRef();
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void shapeRef() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ATPNAME_LN:{
      jj_consume_token(ATPNAME_LN);
      break;
      }
    case ATPNAME_NS:{
      jj_consume_token(ATPNAME_NS);
      break;
      }
    case AT:{
      jj_consume_token(AT);
      shapeExprLabel();
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void litNodeConstraint() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LITERAL:{
      jj_consume_token(LITERAL);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LENGTH:
        case MINLENGTH:
        case MAXLENGTH:
        case MININCLUSIVE:
        case MINEXCLUSIVE:
        case MAXINCLUSIVE:
        case MAXEXCLUSIVE:
        case TOTALDIGITS:
        case FRACTIONDIGITS:
        case REGEXP:{
          ;
          break;
          }
        default:
          jj_la1[25] = jj_gen;
          break label_7;
        }
        xsFacet();
      }
      break;
      }
    case IRIref:
    case PNAME_NS:
    case PNAME_LN:{
      datatype();
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LENGTH:
        case MINLENGTH:
        case MAXLENGTH:
        case MININCLUSIVE:
        case MINEXCLUSIVE:
        case MAXINCLUSIVE:
        case MAXEXCLUSIVE:
        case TOTALDIGITS:
        case FRACTIONDIGITS:
        case REGEXP:{
          ;
          break;
          }
        default:
          jj_la1[26] = jj_gen;
          break label_8;
        }
        xsFacet();
      }
      break;
      }
    case LBRACKET:{
      valueSet();
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LENGTH:
        case MINLENGTH:
        case MAXLENGTH:
        case MININCLUSIVE:
        case MINEXCLUSIVE:
        case MAXINCLUSIVE:
        case MAXEXCLUSIVE:
        case TOTALDIGITS:
        case FRACTIONDIGITS:
        case REGEXP:{
          ;
          break;
          }
        default:
          jj_la1[27] = jj_gen;
          break label_9;
        }
        xsFacet();
      }
      break;
      }
    case MININCLUSIVE:
    case MINEXCLUSIVE:
    case MAXINCLUSIVE:
    case MAXEXCLUSIVE:
    case TOTALDIGITS:
    case FRACTIONDIGITS:{
      label_10:
      while (true) {
        numericFacet();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MININCLUSIVE:
        case MINEXCLUSIVE:
        case MAXINCLUSIVE:
        case MAXEXCLUSIVE:
        case TOTALDIGITS:
        case FRACTIONDIGITS:{
          ;
          break;
          }
        default:
          jj_la1[28] = jj_gen;
          break label_10;
        }
      }
      break;
      }
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// Check precedence
  final public 
void nonLitNodeConstraint() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IRI:
    case BNODE:
    case NONLITERAL:{
      nonLiteralKind();
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LENGTH:
        case MINLENGTH:
        case MAXLENGTH:
        case REGEXP:{
          ;
          break;
          }
        default:
          jj_la1[30] = jj_gen;
          break label_11;
        }
        stringFacet();
      }
      break;
      }
    case LENGTH:
    case MINLENGTH:
    case MAXLENGTH:
    case REGEXP:{
      label_12:
      while (true) {
        stringFacet();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LENGTH:
        case MINLENGTH:
        case MAXLENGTH:
        case REGEXP:{
          ;
          break;
          }
        default:
          jj_la1[31] = jj_gen;
          break label_12;
        }
      }
      break;
      }
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void nonLiteralKind() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IRI:{
      jj_consume_token(IRI);
      break;
      }
    case BNODE:{
      jj_consume_token(BNODE);
      break;
      }
    case NONLITERAL:{
      jj_consume_token(NONLITERAL);
      break;
      }
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void xsFacet() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LENGTH:
    case MINLENGTH:
    case MAXLENGTH:
    case REGEXP:{
      stringFacet();
      break;
      }
    case MININCLUSIVE:
    case MINEXCLUSIVE:
    case MAXINCLUSIVE:
    case MAXEXCLUSIVE:
    case TOTALDIGITS:
    case FRACTIONDIGITS:{
      numericFacet();
      break;
      }
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void stringFacet() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LENGTH:
    case MINLENGTH:
    case MAXLENGTH:{
      stringLength();
      jj_consume_token(INTEGER);
      break;
      }
    case REGEXP:{
      jj_consume_token(REGEXP);
      break;
      }
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void stringLength() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LENGTH:{
      jj_consume_token(LENGTH);
      break;
      }
    case MINLENGTH:{
      jj_consume_token(MINLENGTH);
      break;
      }
    case MAXLENGTH:{
      jj_consume_token(MAXLENGTH);
      break;
      }
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void numericFacet() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MININCLUSIVE:
    case MINEXCLUSIVE:
    case MAXINCLUSIVE:
    case MAXEXCLUSIVE:{
      numericRange();
      numericLiteral();
      break;
      }
    case TOTALDIGITS:
    case FRACTIONDIGITS:{
      numericLength();
      jj_consume_token(INTEGER);
      break;
      }
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void numericRange() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MININCLUSIVE:{
      jj_consume_token(MININCLUSIVE);
      break;
      }
    case MINEXCLUSIVE:{
      jj_consume_token(MINEXCLUSIVE);
      break;
      }
    case MAXINCLUSIVE:{
      jj_consume_token(MAXINCLUSIVE);
      break;
      }
    case MAXEXCLUSIVE:{
      jj_consume_token(MAXEXCLUSIVE);
      break;
      }
    default:
      jj_la1[38] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void numericLength() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOTALDIGITS:{
      jj_consume_token(TOTALDIGITS);
      break;
      }
    case FRACTIONDIGITS:{
      jj_consume_token(FRACTIONDIGITS);
      break;
      }
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void shapeDefinition() throws ParseException {
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CLOSED:
      case EXTRA:{
        ;
        break;
        }
      default:
        jj_la1[40] = jj_gen;
        break label_13;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EXTRA:{
        extraPropertySet();
        break;
        }
      case CLOSED:{
        jj_consume_token(CLOSED);
        break;
        }
      default:
        jj_la1[41] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RDF_TYPE:
    case CARAT:
    case LPAREN:
    case DOLLAR:
    case IRIref:
    case PNAME_NS:
    case PNAME_LN:{
      tripleExpression();
      break;
      }
    default:
      jj_la1[42] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 1:{
        ;
        break;
        }
      default:
        jj_la1[43] = jj_gen;
        break label_14;
      }
      annotation();
    }
    semanticActions();
  }

  final public void inlineShapeDefinition() throws ParseException {
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CLOSED:
      case EXTRA:{
        ;
        break;
        }
      default:
        jj_la1[44] = jj_gen;
        break label_15;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EXTRA:{
        extraPropertySet();
        break;
        }
      case CLOSED:{
        jj_consume_token(CLOSED);
        break;
        }
      default:
        jj_la1[45] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RDF_TYPE:
    case CARAT:
    case LPAREN:
    case DOLLAR:
    case IRIref:
    case PNAME_NS:
    case PNAME_LN:{
      tripleExpression();
      break;
      }
    default:
      jj_la1[46] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
  }

  final public void extraPropertySet() throws ParseException {
    jj_consume_token(EXTRA);
    label_16:
    while (true) {
      predicate();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case RDF_TYPE:
      case IRIref:
      case PNAME_NS:
      case PNAME_LN:{
        ;
        break;
        }
      default:
        jj_la1[47] = jj_gen;
        break label_16;
      }
    }
  }

  final public void tripleExpression() throws ParseException {
    oneOfTripleExpr();
  }

  final public void oneOfTripleExpr() throws ParseException {
    multiElementOneOf();
  }

  final public void multiElementOneOf() throws ParseException {
    groupTripleExpr();
    label_17:
    while (true) {
      jj_consume_token(VBAR);
      groupTripleExpr();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VBAR:{
        ;
        break;
        }
      default:
        jj_la1[48] = jj_gen;
        break label_17;
      }
    }
  }

  final public void groupTripleExpr() throws ParseException {
    multiElementGroup();
  }

// void singleElementGroup() : {}
// {
//   	unaryTripleExpr() (<SEMI_COLON>)?
// }
  final public 
void multiElementGroup() throws ParseException {
    unaryTripleExpr();
    label_18:
    while (true) {
      jj_consume_token(SEMI_COLON);
      unaryTripleExpr();
      if (jj_2_1(2)) {
        ;
      } else {
        break label_18;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SEMI_COLON:{
      jj_consume_token(SEMI_COLON);
      break;
      }
    default:
      jj_la1[49] = jj_gen;
      ;
    }
  }

  final public void unaryTripleExpr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DOLLAR:{
      jj_consume_token(DOLLAR);
      tripleExprLabel();
      break;
      }
    default:
      jj_la1[50] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RDF_TYPE:
    case CARAT:
    case IRIref:
    case PNAME_NS:
    case PNAME_LN:{
      tripleConstraint();
      break;
      }
    case LPAREN:{
      bracketedTripleExpr();
      break;
      }
    default:
      jj_la1[51] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void bracketedTripleExpr() throws ParseException {
    jj_consume_token(LPAREN);
    tripleExpression();
    jj_consume_token(RPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case REPEAT_RANGE:
    case PLUS:
    case QMARK:
    case STAR:{
      cardinality();
      break;
      }
    default:
      jj_la1[52] = jj_gen;
      ;
    }
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 1:{
        ;
        break;
        }
      default:
        jj_la1[53] = jj_gen;
        break label_19;
      }
      annotation();
    }
    semanticActions();
  }

  final public void tripleConstraint() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CARAT:{
      senseFlags();
      break;
      }
    default:
      jj_la1[54] = jj_gen;
      ;
    }
    predicate();
    inlineShapeExpression();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case REPEAT_RANGE:
    case PLUS:
    case QMARK:
    case STAR:{
      cardinality();
      break;
      }
    default:
      jj_la1[55] = jj_gen;
      ;
    }
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 1:{
        ;
        break;
        }
      default:
        jj_la1[56] = jj_gen;
        break label_20;
      }
      annotation();
    }
    semanticActions();
  }

  final public void cardinality() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STAR:{
      jj_consume_token(STAR);
      break;
      }
    case PLUS:{
      jj_consume_token(PLUS);
      break;
      }
    case QMARK:{
      jj_consume_token(QMARK);
      break;
      }
    case REPEAT_RANGE:{
      jj_consume_token(REPEAT_RANGE);
      break;
      }
    default:
      jj_la1[57] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void senseFlags() throws ParseException {
    jj_consume_token(CARAT);
  }

  final public void valueSet() throws ParseException {
    jj_consume_token(LBRACKET);
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TRUE:
      case FALSE:
      case MINUS:
      case AT:
      case IRIref:
      case PNAME_NS:
      case PNAME_LN:
      case STRING_LITERAL1:
      case STRING_LITERAL2:
      case STRING_LITERAL_LONG1:
      case STRING_LITERAL_LONG2:
      case LANG_STRING_LITERAL1:
      case LANG_STRING_LITERAL2:
      case LANG_STRING_LITERAL_LONG1:
      case LANG_STRING_LITERAL_LONG2:
      case INTEGER:
      case DECIMAL:
      case DOUBLE:
      case LANGTAG:{
        ;
        break;
        }
      default:
        jj_la1[58] = jj_gen;
        break label_21;
      }
      valueSetValue();
    }
    jj_consume_token(RBRACKET);
  }

  final public void valueSetValue() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IRIref:
    case PNAME_NS:
    case PNAME_LN:{
      iriRange();
      break;
      }
    case TRUE:
    case FALSE:
    case STRING_LITERAL1:
    case STRING_LITERAL2:
    case STRING_LITERAL_LONG1:
    case STRING_LITERAL_LONG2:
    case LANG_STRING_LITERAL1:
    case LANG_STRING_LITERAL2:
    case LANG_STRING_LITERAL_LONG1:
    case LANG_STRING_LITERAL_LONG2:
    case INTEGER:
    case DECIMAL:
    case DOUBLE:{
      literalRange();
      break;
      }
    case AT:
    case LANGTAG:{
      languageRange();
      break;
      }
    case MINUS:{
      label_22:
      while (true) {
        exclusion();
        if (jj_2_2(2)) {
          ;
        } else {
          break label_22;
        }
      }
      break;
      }
    default:
      jj_la1[59] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void exclusion() throws ParseException {
    jj_consume_token(MINUS);
    if (jj_2_3(2)) {
      iri();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TRUE:
      case FALSE:
      case STRING_LITERAL1:
      case STRING_LITERAL2:
      case STRING_LITERAL_LONG1:
      case STRING_LITERAL_LONG2:
      case LANG_STRING_LITERAL1:
      case LANG_STRING_LITERAL2:
      case LANG_STRING_LITERAL_LONG1:
      case LANG_STRING_LITERAL_LONG2:
      case INTEGER:
      case DECIMAL:
      case DOUBLE:{
        literal();
        break;
        }
      case LANGTAG:{
        jj_consume_token(LANGTAG);
        break;
        }
      default:
        jj_la1[60] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TILDE:{
      jj_consume_token(TILDE);
      break;
      }
    default:
      jj_la1[61] = jj_gen;
      ;
    }
  }

// ---- HERE ----
  final public 

void iriRange() throws ParseException {
    iri();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TILDE:{
      jj_consume_token(TILDE);
      label_23:
      while (true) {
        if (jj_2_4(2)) {
          ;
        } else {
          break label_23;
        }
        exclusion();
      }
      break;
      }
    default:
      jj_la1[62] = jj_gen;
      ;
    }
  }

  final public void iriExclusion() throws ParseException {
    jj_consume_token(MINUS);
    iri();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TILDE:{
      jj_consume_token(TILDE);
      break;
      }
    default:
      jj_la1[63] = jj_gen;
      ;
    }
  }

  final public void literalRange() throws ParseException {
    literal();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TILDE:{
      jj_consume_token(TILDE);
      label_24:
      while (true) {
        if (jj_2_5(2)) {
          ;
        } else {
          break label_24;
        }
        literalExclusion();
      }
      break;
      }
    default:
      jj_la1[64] = jj_gen;
      ;
    }
  }

  final public void literalExclusion() throws ParseException {
    jj_consume_token(MINUS);
    literal();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TILDE:{
      jj_consume_token(TILDE);
      break;
      }
    default:
      jj_la1[65] = jj_gen;
      ;
    }
  }

  final public void languageRange() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LANGTAG:{
      jj_consume_token(LANGTAG);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TILDE:{
        jj_consume_token(TILDE);
        label_25:
        while (true) {
          if (jj_2_6(2)) {
            ;
          } else {
            break label_25;
          }
          languageExclusion();
        }
        break;
        }
      default:
        jj_la1[66] = jj_gen;
        ;
      }
      break;
      }
    case AT:{
      jj_consume_token(AT);
      jj_consume_token(TILDE);
      label_26:
      while (true) {
        if (jj_2_7(2)) {
          ;
        } else {
          break label_26;
        }
        languageExclusion();
      }
      break;
      }
    default:
      jj_la1[67] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void languageExclusion() throws ParseException {
    jj_consume_token(MINUS);
    jj_consume_token(LANGTAG);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TILDE:{
      jj_consume_token(TILDE);
      break;
      }
    default:
      jj_la1[68] = jj_gen;
      ;
    }
  }

  final public void include() throws ParseException {
    jj_consume_token(AMP);
    tripleExprLabel();
  }

  final public void annotation() throws ParseException {
    jj_consume_token(1);
    predicate();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IRIref:
    case PNAME_NS:
    case PNAME_LN:{
      iri();
      break;
      }
    case TRUE:
    case FALSE:
    case STRING_LITERAL1:
    case STRING_LITERAL2:
    case STRING_LITERAL_LONG1:
    case STRING_LITERAL_LONG2:
    case LANG_STRING_LITERAL1:
    case LANG_STRING_LITERAL2:
    case LANG_STRING_LITERAL_LONG1:
    case LANG_STRING_LITERAL_LONG2:
    case INTEGER:
    case DECIMAL:
    case DOUBLE:{
      literal();
      break;
      }
    default:
      jj_la1[69] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void semanticActions() throws ParseException {
    label_27:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PERCENT_CHAR:{
        ;
        break;
        }
      default:
        jj_la1[70] = jj_gen;
        break label_27;
      }
      codeDecl();
    }
  }

  final public void codeDecl() throws ParseException {
    jj_consume_token(PERCENT_CHAR);
    iri();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CODE:{
      jj_consume_token(CODE);
      break;
      }
    case PERCENT_CHAR:{
      jj_consume_token(PERCENT_CHAR);
      break;
      }
    default:
      jj_la1[71] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void literal() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STRING_LITERAL1:
    case STRING_LITERAL2:
    case STRING_LITERAL_LONG1:
    case STRING_LITERAL_LONG2:
    case LANG_STRING_LITERAL1:
    case LANG_STRING_LITERAL2:
    case LANG_STRING_LITERAL_LONG1:
    case LANG_STRING_LITERAL_LONG2:{
      rdfLiteral();
      break;
      }
    case INTEGER:
    case DECIMAL:
    case DOUBLE:{
      numericLiteral();
      break;
      }
    case TRUE:
    case FALSE:{
      booleanLiteral();
      break;
      }
    default:
      jj_la1[72] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void predicate() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IRIref:
    case PNAME_NS:
    case PNAME_LN:{
      iri();
      break;
      }
    case RDF_TYPE:{
      jj_consume_token(RDF_TYPE);
      break;
      }
    default:
      jj_la1[73] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// void datatype() : {}
// {
//     iri()
// }
  final public 
void shapeExprLabel() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IRIref:
    case PNAME_NS:
    case PNAME_LN:{
      iri();
      break;
      }
    case BLANK_NODE_LABEL:{
      blankNode();
      break;
      }
    default:
      jj_la1[74] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void tripleExprLabel() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IRIref:
    case PNAME_NS:
    case PNAME_LN:{
      iri();
      break;
      }
    case BLANK_NODE_LABEL:{
      blankNode();
      break;
      }
    default:
      jj_la1[75] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// ------------------------- Terms
  final public 
void booleanLiteral() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TRUE:{
      jj_consume_token(TRUE);
      break;
      }
    case FALSE:{
      jj_consume_token(FALSE);
      break;
      }
    default:
      jj_la1[76] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void numericLiteral() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER:{
      jj_consume_token(INTEGER);
      break;
      }
    case DECIMAL:{
      jj_consume_token(DECIMAL);
      break;
      }
    case DOUBLE:{
      jj_consume_token(DOUBLE);
      break;
      }
    default:
      jj_la1[77] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void rdfLiteral() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LANG_STRING_LITERAL1:
    case LANG_STRING_LITERAL2:
    case LANG_STRING_LITERAL_LONG1:
    case LANG_STRING_LITERAL_LONG2:{
      langString();
      break;
      }
    case STRING_LITERAL1:
    case STRING_LITERAL2:
    case STRING_LITERAL_LONG1:
    case STRING_LITERAL_LONG2:{
      string();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 2:{
        jj_consume_token(2);
        datatype();
        break;
        }
      default:
        jj_la1[78] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[79] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void datatype() throws ParseException {
    iri();
  }

  final public void string() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STRING_LITERAL_LONG1:{
      jj_consume_token(STRING_LITERAL_LONG1);
      break;
      }
    case STRING_LITERAL_LONG2:{
      jj_consume_token(STRING_LITERAL_LONG2);
      break;
      }
    case STRING_LITERAL1:{
      jj_consume_token(STRING_LITERAL1);
      break;
      }
    case STRING_LITERAL2:{
      jj_consume_token(STRING_LITERAL2);
      break;
      }
    default:
      jj_la1[80] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void langString() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LANG_STRING_LITERAL1:{
      jj_consume_token(LANG_STRING_LITERAL1);
      break;
      }
    case LANG_STRING_LITERAL_LONG1:{
      jj_consume_token(LANG_STRING_LITERAL_LONG1);
      break;
      }
    case LANG_STRING_LITERAL2:{
      jj_consume_token(LANG_STRING_LITERAL2);
      break;
      }
    case LANG_STRING_LITERAL_LONG2:{
      jj_consume_token(LANG_STRING_LITERAL_LONG2);
      break;
      }
    default:
      jj_la1[81] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public String iri() throws ParseException {String iri = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IRIref:{
      iri = IRIREF();
{if ("" != null) return iri ;}
      break;
      }
    case PNAME_NS:
    case PNAME_LN:{
      iri = prefixedName();
{if ("" != null) return iri ;}
      break;
      }
    default:
      jj_la1[82] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void blankNode() throws ParseException {
    jj_consume_token(BLANK_NODE_LABEL);
  }

  final public String prefixedName() throws ParseException {Token t ;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PNAME_LN:{
      t = jj_consume_token(PNAME_LN);
      break;
      }
    case PNAME_NS:{
      t = jj_consume_token(PNAME_NS);
      break;
      }
    default:
      jj_la1[83] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return null;}
    throw new Error("Missing return statement in function");
  }

  final public String IRIREF() throws ParseException {Token t ;
    t = jj_consume_token(IRIref);
{if ("" != null) return null;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_3R_51()
 {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_47()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) return true;
    }
    return false;
  }

  private boolean jj_3R_49()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(84)) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_38()
 {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_50()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) return true;
    }
    return false;
  }

  private boolean jj_3R_30()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) return true;
    }
    return false;
  }

  private boolean jj_3R_37()
 {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_53()
 {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_44()
 {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_41()
 {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_39()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_54()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(78)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_36()
 {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_35()
 {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_55()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(76)) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(75)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_33()
 {
    if (jj_scan_token(DOLLAR)) return true;
    return false;
  }

  private boolean jj_3R_28()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_33()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    }
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_52()
 {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_48()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) return true;
    }
    return false;
  }

  private boolean jj_3R_46()
 {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_29()
 {
    if (jj_scan_token(MINUS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_scan_token(89)) return true;
    }
    }
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_42()
 {
    if (jj_scan_token(IRIref)) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_32()
 {
    if (jj_scan_token(MINUS)) return true;
    if (jj_scan_token(LANGTAG)) return true;
    return false;
  }

  private boolean jj_3R_34()
 {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_45()
 {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_43()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(68)) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) return true;
    }
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_scan_token(SEMI_COLON)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_31()
 {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_40()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(45)) jj_scanpos = xsp;
    if (jj_3R_47()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ShExJavaccTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[84];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x200,0x1c00,0x1c00,0x8000,0x0,0x9c00,0xfff30000,0x40000,0x40000,0x80000,0x80000,0x20000,0x20000,0x0,0x7e00000,0xfff00000,0x0,0x7e00000,0xfff00000,0x0,0x7e00000,0xfff00000,0x0,0x0,0x0,0xff000000,0xff000000,0xff000000,0xf8000000,0xf8100000,0x7000000,0x7000000,0x7e00000,0xe00000,0xff000000,0x7000000,0x7000000,0xf8000000,0x78000000,0x80000000,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x4000000,0x0,0x1505007,0x0,0x0,0x0,0x0,0x0,0x0,0x401006,0x0,0x1505007,0x401006,0x0,0x1504007,0x401006,0x0,0x1505007,0x401006,0x401006,0x1000,0x1,0x1,0x1,0x1,0x1000001,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x1,0x0,0x1,0x6,0x6,0x40102008,0x0,0x6,0x6,0x40102008,0x8,0x800,0x20000000,0x40000000,0x102008,0x50220,0x0,0x2000,0x50220,0x0,0x50220,0x14c0,0x14c0,0xc0,0x80000000,0x80000000,0x80000000,0x80000000,0x80000000,0x80000000,0x1000,0x80000000,0xc0,0x4000000,0x4000010,0xc0,0x8,0x0,0x0,0xc0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x100001c,0x0,0x100001c,0x80007c,0x0,0x0,0x0,0x0,0x0,0x0,0x60,0x800000,0x80007c,0x60,0x800000,0x80001c,0x60,0x800000,0x80007c,0x60,0x60,0x60,0x800000,0x800000,0x800000,0x0,0x1c,0x800000,0x800000,0x800000,0x0,0x800000,0x800000,0x0,0x0,0x0,0x0,0x0,0x0,0x1c,0x0,0x0,0x0,0x1c,0x1c,0x0,0x0,0x0,0x1c,0x0,0x0,0x0,0x0,0x0,0x0,0x23bfc1c,0x23bfc1c,0x23bfc00,0x0,0x0,0x0,0x0,0x0,0x0,0x2000000,0x0,0x3bfc1c,0x0,0x0,0x3bfc00,0x1c,0x100001c,0x100001c,0x0,0x380000,0x0,0x3fc00,0x3c00,0x3c000,0x1c,0x18,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[7];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ShExJavacc(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ShExJavacc(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ShExJavaccTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 84; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 84; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ShExJavacc(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ShExJavaccTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 84; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 84; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ShExJavacc(ShExJavaccTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 84; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ShExJavaccTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 84; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[102];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 84; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 102; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 7; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

 }
