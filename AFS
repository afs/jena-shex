==== SHACL vs SheX

SHACL ++
    sh:uniqueLang

ShEx ++
    better value handling.
      sets and exclusions.
    enumerations
    
SHACL -- No complete compact

ShEx ?? ShapeMap

SHACL ?? has sh:class -> Hook to RDFS?

SHACL-AF: ShEx devolves to shape map.
    Custom Targets
        3.1 SPARQL-based Targets
        3.2 SPARQL-based Target Types

REPEAT_RANGE
  Why "{}"?
  Why a token? (ambiguity!)
  Why no WS?

1/ iriExclusion (spec wrong)
2/ ShExDoc.g4 => valueSetValue (rewrite - intermediate stage for lookahead(1)
3/ tripleExpression (shift/reduce)

anyExclusion need fixing.

== Grammar

Cardinality => repeat

REPEAT_RANGE  Why a token? (ambiguity!) No WS.
LANG_STRING -- token

4/ iriRange (spec wrong)

  [51]   	iriRange	   ::=   	   iri ('~' exclusion*)?
  ==>> g4
                                                   iri ('~' iriExclusion*)?

5/ ShExDoc.g4 => valueSetValue (rewrite - intermediate stage for lookahead(1)

6/ tripleExpression (shift/reduce) (rewrite)

9/ No use of shapeAtomNoRef

13/ Ambiguity:

<LBRACKET> (valueSetValue())* <RBRACKET>
but
valueSetValue ::= ... | exclusion+

14/ What is the intended syntax?

Spec: [ . - "foo" . - "bar" ]

because "." , "-" is part of "exclusion".

    | '.' (iriExclusion+ | literalExclusion+ | languageExclusion+)

Suggestion:

 | <DOT> (exclusion())+

    exclusion ::= <MINUS>
              ( iri() (<TILDE>)?
              | literal() (<TILDE>)?
              | <LANGTAG> (<TILDE>)?
              )

so allowing:

[ . - 123 - <iri> ]

14b/ Value MINUS
Better as "^"?

"-123" != "-" "123"

15/ StringFacet
"Length=" more obvious
as is
Length=[0,5]

Std math notation is "[", inclusive and "(" exclusive. "[5,]" mean 5->infinity

and change valueSet.

17/ Negative syntax test for LENGTH LENGTH but the grammar allows it.
(of course it may get lost in the JSON but that's not grammar but then if LENGTH 10 LENGTH 20 - which is right?

19/ true~

==== spec

== 2.5 Validation process

Formatting hard to understand. List? Use ";"?
Bad accessibility.

== 5.4.4 XML Schema String Facet Constraints

Stray:
"Let lex ="

== 5.2 Validation Definition

=== TripleConstraint.

:Shape { :predicate LITERAL {2} }

=> tripleConstraint with tripleExpr LITERAL and min=max=2.
matches for tripleConstraint takes a T that is a singleton.


"""
expr has a cardinality of min and/or max not equal to 1, where a max of -1 is treated as unbounded, and T can be partitioned into k subsets T1, T2,…Tk such that min ≤ k ≤ max and for each Tn, matches(Tn, expr, m) by the remaining rules in this list.
"""

"expr has a cardinality" - exprs do not have a "cardinality"
